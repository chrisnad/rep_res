install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("C:/Users/nader/Downloads/swirl_2.2.16.zip", repos = NULL)
library(swirl)
swirl()
library(swirl)
library(swirl)
library(swirl)
install.packages("RCurl")
library(datasets)
data(iris)
?iris
iris
iris[["virginica"]]
iris[[petal.length]]
iris[['Sepal.Length']]
apply(iris)
sapply(iris)
iris$virginica
str(iris)
iris$Species
iris$Species$virginica
iris$Species["virginica"]
iris$Species[a]
iris$Species[1]
iris$Species[2]
iris$Species[1][1]
iris$Species[[1]]
sapply(iris, mean)
sapply(iris, mean, "Sepal.Width")
sapply(iris[['Sepal.Length']], mean)
iris
iris$species
iris$Species
iris$Species$Levels
iris$Species[10]
iris$Species[100]
iris$Species[100] == versicolor
iris$Species[100] == "versicolor"
for (i in length(iris)){}
for (i in length(iris)){
?mean
mean(iris$Sepal.Length[iris$Species == "virginica"])
iris$Species == "virginica"
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
iris[, 1:4]
apply(iris[, 1], 2, mean)
apply(iris[, 1], mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:2], 2, mean)
apply(iris[, 1:1], 2, mean)
iris[, 1]
library(datasets)
data(mtcars)
?mtcars
mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
x <- sapply(split(mtcars$hp, mtcars$cyl), mean)
x
x[[8]] - x[[4]]
x[["8"]] - x[["4"]]
debug(ls)
ls
n
debug(Ls)
debug(ls)
ls
5
numeric()
x <- numeric()
x
debug
exit
quit
quit()
exit()
2
pos
options(error = recover)
debug
quit
quit()
A
q
az
aze
A
Q
source('~/.active-rstudio-document')
makeVector()
makeVector(2)
makeVector(x)
makeVector(rnorm(100))
getmean()
x <- makeVector(rnorm(100))
x§getmean()
x$getmean()
x
x[1]
x[100]
x[[100]
]
x[[1]]
source('~/.active-rstudio-document')
cachemean()
cachemean(x)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
zz <- makeCacheMatrix(matrix(nrow = 1, ncol = 1))
zz
getmatrix(zz)
zz.getmatrix
cacheSolve(zz)
(matrix(nrow = 1, ncol = 1))
(matrix(nrow = 10, ncol = 10))
(matrix(1,nrow = 10, ncol = 10))
(matrix(nrow+ncol,nrow = 10, ncol = 10))
z <- (matrix(rnorm(),nrow = 10, ncol = 10))
z <- (matrix(rnorm(1),nrow = 10, ncol = 10))
z
z <- (matrix(rnorm(2),nrow = 10, ncol = 10))
z
z <- (matrix(rnorm(100),nrow = 10, ncol = 10))
z
zz <- makeCacheMatrix(z)
cacheSolve(zz)
cacheSolve(zz) == solve(z)
matrix()
parent.frame()
parent.frame(cachematrix)
parent.frame(cachematrix.R)
parent.frame(makeCacheMatrix)
parent.frame(makeCacheMatrix())
parent.frame() makeCacheMatrix
parent.frame() makeCacheMatrix()
parent.frame(x)
x
environment()
as.environment()
search()
ls()
environment()
search()
parent.env()
parent..GlobalEnv()
parent.GlobalEnv()
parent.env(.GlobalEnv)
search[1]
search()[1]
parent.env(search()[1])
parent.env(enviroment()
)
environment()
ls.str(environment())
library(pryr)
install.packages("pryr")
install.packages("C:/Users/nader/Downloads/pryr_0.1.zip", repos = NULL)
library(pryr)
source('~/.active-rstudio-document')
zz
z
zz <- makeCacheMatrix(z)
zz
zz == solve(z)
zz
cacheSolve(zz) == solve(z)
fixed = c(FALSE,FALSE)
params = fixed
params
params[!fixed]
params[fixed]
fixed = c(FALSE,2)
params[!fixed]
!2
params[fixed]
fixed = c(FALSE,FALSE)
params[fixed]
get <- function()
x
get(12)
get(]
get()
x = &é""
x = 123
get()
set.seed(1)
rpois(5, 2)
qpois?
?qpois
?dpois
x <- rbinom(10, 10, 0.5)
x
x <- rbinom(10, 0.5)
x <- rbinom(10,1, 0.5)
x
x <- rbinom(10,2, 0.5)
x
x <- rbinom(10,2, 1)
x
x <- rbinom(10,2, 0.1)
x
x <- rbinom(10, 10, 0.5)
x <- rbinom(100, 10, 0.5)
mean(x)
x <- rbinom(1000, 10, 0.5)
mean(x)
x <- rbinom(10000, 10, 0.5)
mean(x)
x <- rbinom(100000, 10, 0.5)
mean(x)
x <- rbinom(1000000, 10, 0.5)
mean(x)
x <- rbinom(10000000, 10, 0.5)
mean(x)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
plot(x,y)
y
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rbinom(100, 10, 0.5)
e <- rnorm(100, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
set.seed(10)
x <- rbinom(1000, 10, 0.5)
e <- rnorm(1000, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
plot(y)
hist(y)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, Bodyweight)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("C:/Users/nader/Downloads/ggplot2_1.0.0.zip", repos = NULL)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("C:/Users/nader/Downloads/gtable_0.1.2.zip", repos = NULL)
library(ggplot2)
install.packages("C:/Users/nader/Downloads/proto_0.3-10.zip", repos = NULL)
library(ggplot2)
install.packages("C:/Users/nader/Downloads/scales_0.2.4.zip", repos = NULL)
library(ggplot2)
install.packages("C:/Users/nader/Downloads/munsell_0.4.2.zip", repos = NULL)
library(ggplot2)
install.packages("C:/Users/nader/Downloads/colorspace_1.2-4.zip", repos = NULL)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("C:/Users/nader/Downloads/labeling_0.3.zip", repos = NULL)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
head(airquality)
getwd()
setwd("C:/Users/nader/Desktop/repro_res_ass2")
?bunzip2
R.utils
?R.utils
install.packages("r.utils")
install.packages("C:/Users/nader/Downloads/R.oo_1.18.0.zip", repos = NULL)
install.packages("C:/Users/nader/Downloads/R.utils_1.34.0.zip", repos = NULL)
library(r.utils)
?bunzip2
library(utils)
?bunzip2
install.packages("C:/Users/nader/Downloads/R.methodsS3_1.6.1.zip", repos = NULL)
?bunzip2
## load necessary library
library(ggplot2)
library(plyr)
library(gridExtra)
if (!file.exists("StormData.csv.bz2")) {
fileURL <- 'https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2'
download.file(fileURL, destfile='StormData.csv.bz2', method = 'curl')
}
data <- read.csv(bzfile('StormData.csv.bz2'),header=TRUE, stringsAsFactors = TRUE)
data <- read.csv(bzfile('repdata_data_StormData.csv.bz2'),header=TRUE, stringsAsFactors = TRUE)
head(data)
unique(data$EVTYPE)
library(ggplot2)
library(dplyr)
data <- data %>%
select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDM, CROPDMGEXP)
data <- data %>%
select(EVTYPE, FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
head(data)
str(data)
data <- data[!(data$FATALITIES==0 & data$INJURIES==0 & data$PROPDMG==0 & data$CROPDMG==0),]
str(data)
unique(data$Evtype)
unique(data$EVTYPE)
head(data)
str(data$EVTYPE)
summary(data$EVTYPE)
length(data$EVTYPE)
head(summary(data$EVTYPE))
histogram(summary(data$EVTYPE))
histo(summary(data$EVTYPE))
hist(summary(data$EVTYPE))
hist(data$EVTYPE)
unique(data$PROPDMGEXP)
unique(data$CROPDMGEXP)
?toupper
data$PROPDMGEXP<-toupper(data$PROPDMGEXP)
unique(data$PROPDMGEXP)
data$CROPDMGEXP<-toupper(data$CROPDMGEXP)
data$PROPEXP[data$PROPDMGEXP == "K"] <- 1e+03
data$PROPEXP[data$PROPDMGEXP == "M"] <- 1e+06
data$PROPEXP[data$PROPDMGEXP == ""] <- 1
data$PROPEXP[data$PROPDMGEXP == "B"] <- 1e+09
data$PROPEXP[data$PROPDMGEXP == "0"] <- 1
data$PROPEXP[data$PROPDMGEXP == "5"] <- 1e+05
data$PROPEXP[data$PROPDMGEXP == "6"] <- 1e+06
data$PROPEXP[data$PROPDMGEXP == "4"] <- 1e+04
data$PROPEXP[data$PROPDMGEXP == "2"] <- 100
data$PROPEXP[data$PROPDMGEXP == "3"] <- 1000
data$PROPEXP[data$PROPDMGEXP == "7"] <- 1e+07
data$PROPEXP[data$PROPDMGEXP == "H"] <- 100
data$PROPEXP[data$PROPDMGEXP == "1"] <- 10
data$PROPEXP[data$PROPDMGEXP == "8"] <- 1e+08
data$PROPEXP[data$PROPDMGEXP == "+"] <- 0
data$PROPEXP[data$PROPDMGEXP == "-"] <- 0
data$PROPEXP[data$PROPDMGEXP == "?"] <- 0
data$CROPEXP[data$CROPDMGEXP == "M"] <- 1e+06
data$CROPEXP[data$CROPDMGEXP == "K"] <- 1000
data$CROPEXP[data$CROPDMGEXP == "B"] <- 1e+09
data$CROPEXP[data$CROPDMGEXP == "0"] <- 1
data$CROPEXP[data$CROPDMGEXP == "2"] <- 100
data$CROPEXP[data$CROPDMGEXP == ""] <- 1
data$CROPEXP[data$CROPDMGEXP == "?"] <- 0
head(data)
?summarise
data <- data %>%
mutate(PROPDMG = PROPDMG*PROPEXP)
mutate(CROPDMG = CROPDMG*CROPEXP)
data <- data %>%
mutate(PROPDMG = PROPDMG*PROPEXP) %>%
mutate(CROPDMG = CROPDMG*CROPEXP)
head(data)
data <- data %>%
mutate(PROPDMG = PROPDMG*PROPEXP)
mutate(CROPDMG = CROPDMG*CROPEXP)
select(EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG)
data <- data %>%
mutate(PROPDMG = PROPDMG*PROPEXP) %>%
mutate(CROPDMG = CROPDMG*CROPEXP) %>%
select(EVTYPE, FATALITIES, INJURIES, PROPDMG, CROPDMG)
head(data)
max(data)
head(data$CROPDMG)
max(data$CROPDMG)
data[1]
data_prime[1] <- unique(data$EVTYPE)
data_prime <- data.frame
data_prime[1] <- unique(data$EVTYPE)
data_prime
rm(data_prime)
data_prime <- unique(data$EVTYPE)
data_prime
data_prime$EVTYPE <- unique(data$EVTYPE)
rm(data_prime)
data_prime$EVTYPE <- unique(data$EVTYPE)
data.frame(data_prime)
data_p <- data.frame(1,1)
data_p
data_p <- data.frame()
data_p
data_p$EVTYPE <- unique(data$EVTYPE)
data_p <- data.frame(EVTYPE = unique(data$EVTYPE))
data_p
test <- data %>%
qsd
head(data)
data_p$mFATALITIES <- mean(data$FATALITIES[EVTYPE == data_p$EVTYPE])
data_p$mFATALITIES <- mean(data$FATALITIES[data$EVTYPE == data_p$EVTYPE])
data_p$mFATALITIES <- mean(data$FATALITIES[data$EVTYPE %in% data_p$EVTYPE)
data_p$mFATALITIES <- mean(data$FATALITIES[data$EVTYPE %in% data_p$EVTYPE])
head(data_p)
data$FATALITIES[data$EVTYPE %in% data_p$EVTYPE]
data$FATALITIES[data_p$EVTYPE %in% data$EVTYPE]
data_p$EVTYPE %in% data$EVTYPE
?aggregate
aggregate(. ~ EVTYPE, data = data_p, mean)
aggregate(. ~ EVTYPE, data = data, mean)
head(data)
summarize(data)
summarise(data)
summary(data)
summary(data)[1]
table(data)
table(data$EVTYPE)
?table
summary(data$EVTYPE)
data.frame(lapply(data, function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
head(data)
data(lapply(data, function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
data<-data.frame(lapply(dat, function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
data<-data.frame(lapply(data, function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
unique(data$)
unique(data$EVTYPE)
data$EVTYPE<-data.frame(lapply(data$EVTYPE, function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
unique(data$EVTYPE)
